{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api'; // Your backend API\n\nconst soccerApiService = {\n  getLiveMatches: async () => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/matches/live`);\n      return response.data.result || [];\n    } catch (error) {\n      console.error('Error fetching live matches:', error);\n      return [];\n    }\n  },\n  getUpcomingMatches: async (hours = 24) => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/matches/upcoming?hours=${hours}`);\n      return response.data.result || [];\n    } catch (error) {\n      console.error('Error fetching upcoming matches:', error);\n      return [];\n    }\n  },\n  getStats: async (period = 'week') => {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/stats?period=${period}`);\n      return response.data.result || {\n        roi: {\n          daily: [],\n          weekly: 0,\n          monthly: 0\n        },\n        bets: {\n          daily: [],\n          totalWins: 0,\n          totalLosses: 0,\n          winRate: 0\n        }\n      };\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      return {\n        roi: {\n          daily: [],\n          weekly: 0,\n          monthly: 0\n        },\n        bets: {\n          daily: [],\n          totalWins: 0,\n          totalLosses: 0,\n          winRate: 0\n        }\n      };\n    }\n  }\n};\nexport default soccerApiService;","map":{"version":3,"names":["axios","API_BASE_URL","soccerApiService","getLiveMatches","response","get","data","result","error","console","getUpcomingMatches","hours","getStats","period","roi","daily","weekly","monthly","bets","totalWins","totalLosses","winRate"],"sources":["C:/Users/mathe/OneDrive/Desktop/odd-genius/frontend/src/api/soccerApiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api'; // Your backend API\r\n\r\nexport interface Match {\r\n  id: string;\r\n  league: {\r\n    id: string;\r\n    name: string;\r\n    logo: string;\r\n  };\r\n  homeTeam: {\r\n    id: string;\r\n    name: string;\r\n    logo: string;\r\n    rating?: number;\r\n  };\r\n  awayTeam: {\r\n    id: string;\r\n    name: string;\r\n    logo: string;\r\n    rating?: number;\r\n  };\r\n  date: string;\r\n  time: string;\r\n  status: 'LIVE' | 'NS' | 'FT' | 'HT' | 'CANC';\r\n  elapsed?: number;\r\n  venue: string;\r\n  score?: {\r\n    home: number;\r\n    away: number;\r\n  };\r\n  odds: {\r\n    home: number;\r\n    draw: number;\r\n    away: number;\r\n  };\r\n  probability: {\r\n    home: string;\r\n    draw: string;\r\n    away: string;\r\n  };\r\n  recommended?: 'home' | 'draw' | 'away';\r\n  algorithm?: {\r\n    recommendation: string;\r\n    confidence: number;\r\n    type: string;\r\n  };\r\n  isPromo?: boolean;\r\n}\r\n\r\nexport interface StatsData {\r\n  roi: {\r\n    daily: Array<{date: string, value: number}>;\r\n    weekly: number;\r\n    monthly: number;\r\n  };\r\n  bets: {\r\n    daily: Array<{date: string, wins: number, losses: number}>;\r\n    totalWins: number;\r\n    totalLosses: number;\r\n    winRate: number;\r\n  };\r\n}\r\n\r\nconst soccerApiService = {\r\n  getLiveMatches: async (): Promise<Match[]> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/matches/live`);\r\n      return response.data.result || [];\r\n    } catch (error) {\r\n      console.error('Error fetching live matches:', error);\r\n      return [];\r\n    }\r\n  },\r\n  \r\n  getUpcomingMatches: async (hours = 24): Promise<Match[]> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/matches/upcoming?hours=${hours}`);\r\n      return response.data.result || [];\r\n    } catch (error) {\r\n      console.error('Error fetching upcoming matches:', error);\r\n      return [];\r\n    }\r\n  },\r\n  \r\n  getStats: async (period = 'week'): Promise<StatsData> => {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/stats?period=${period}`);\r\n      return response.data.result || {\r\n        roi: { daily: [], weekly: 0, monthly: 0 },\r\n        bets: { daily: [], totalWins: 0, totalLosses: 0, winRate: 0 }\r\n      };\r\n    } catch (error) {\r\n      console.error('Error fetching stats:', error);\r\n      return {\r\n        roi: { daily: [], weekly: 0, monthly: 0 },\r\n        bets: { daily: [], totalWins: 0, totalLosses: 0, winRate: 0 }\r\n      };\r\n    }\r\n  }\r\n};\r\n\r\nexport default soccerApiService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B,CAAC,CAAC;;AA+DlD,MAAMC,gBAAgB,GAAG;EACvBC,cAAc,EAAE,MAAAA,CAAA,KAA8B;IAC5C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,eAAe,CAAC;MAChE,OAAOG,QAAQ,CAACE,IAAI,CAACC,MAAM,IAAI,EAAE;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,OAAO,EAAE;IACX;EACF,CAAC;EAEDE,kBAAkB,EAAE,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAuB;IAC1D,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,2BAA2BU,KAAK,EAAE,CAAC;MACnF,OAAOP,QAAQ,CAACE,IAAI,CAACC,MAAM,IAAI,EAAE;IACnC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO,EAAE;IACX;EACF,CAAC;EAEDI,QAAQ,EAAE,MAAAA,CAAOC,MAAM,GAAG,MAAM,KAAyB;IACvD,IAAI;MACF,MAAMT,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,YAAY,iBAAiBY,MAAM,EAAE,CAAC;MAC1E,OAAOT,QAAQ,CAACE,IAAI,CAACC,MAAM,IAAI;QAC7BO,GAAG,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,MAAM,EAAE,CAAC;UAAEC,OAAO,EAAE;QAAE,CAAC;QACzCC,IAAI,EAAE;UAAEH,KAAK,EAAE,EAAE;UAAEI,SAAS,EAAE,CAAC;UAAEC,WAAW,EAAE,CAAC;UAAEC,OAAO,EAAE;QAAE;MAC9D,CAAC;IACH,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAO;QACLM,GAAG,EAAE;UAAEC,KAAK,EAAE,EAAE;UAAEC,MAAM,EAAE,CAAC;UAAEC,OAAO,EAAE;QAAE,CAAC;QACzCC,IAAI,EAAE;UAAEH,KAAK,EAAE,EAAE;UAAEI,SAAS,EAAE,CAAC;UAAEC,WAAW,EAAE,CAAC;UAAEC,OAAO,EAAE;QAAE;MAC9D,CAAC;IACH;EACF;AACF,CAAC;AAED,eAAenB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}