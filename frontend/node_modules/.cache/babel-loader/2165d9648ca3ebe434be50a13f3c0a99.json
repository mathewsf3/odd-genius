{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\nconst soccerApiService = {\n  getLiveMatches: async () => {\n    try {\n      console.log('Fetching live matches from API');\n      const response = await axios.get(`${API_BASE_URL}/matches/live`);\n      console.log('API response for live matches:', response.data);\n      if (!response.data || !response.data.result) {\n        throw new Error('Invalid API response format');\n      }\n      return response.data.result;\n    } catch (error) {\n      console.error('Error fetching live matches:', error);\n      throw error; // Don't return empty array - throw error to prevent fallback data use\n    }\n  },\n  getUpcomingMatches: async (hours = 24) => {\n    try {\n      console.log(`Fetching upcoming matches for next ${hours} hours from API`);\n      const response = await axios.get(`${API_BASE_URL}/matches/upcoming?hours=${hours}`);\n      console.log('API response for upcoming matches:', response.data);\n      if (!response.data || !response.data.result) {\n        throw new Error('Invalid API response format');\n      }\n      return response.data.result;\n    } catch (error) {\n      console.error('Error fetching upcoming matches:', error);\n      throw error; // Don't return empty array - throw error to prevent fallback data use\n    }\n  },\n  getStats: async (period = 'week') => {\n    try {\n      console.log(`Fetching stats for period ${period} from API`);\n      const response = await axios.get(`${API_BASE_URL}/stats?period=${period}`);\n      console.log('API response for stats:', response.data);\n      if (!response.data || !response.data.result) {\n        throw new Error('Invalid API response format');\n      }\n      return response.data.result;\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      throw error; // Don't return empty array - throw error to prevent fallback data use\n    }\n  }\n};\nexport default soccerApiService;","map":{"version":3,"names":["axios","API_BASE_URL","soccerApiService","getLiveMatches","console","log","response","get","data","result","Error","error","getUpcomingMatches","hours","getStats","period"],"sources":["C:/Users/mathe/OneDrive/Desktop/odd-genius/frontend/src/api/soccerApiService.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nexport interface Match {\r\n  id: string;\r\n  league: {\r\n    id: string;\r\n    name: string;\r\n    logo: string;\r\n  };\r\n  homeTeam: {\r\n    id: string;\r\n    name: string;\r\n    logo: string;\r\n    rating?: number;\r\n  };\r\n  awayTeam: {\r\n    id: string;\r\n    name: string;\r\n    logo: string;\r\n    rating?: number;\r\n  };\r\n  date: string;\r\n  time: string;\r\n  status: 'LIVE' | 'NS' | 'FT' | 'HT' | 'CANC';\r\n  elapsed?: number;\r\n  venue: string;\r\n  score?: {\r\n    home: number;\r\n    away: number;\r\n  };\r\n  odds: {\r\n    home: number;\r\n    draw: number;\r\n    away: number;\r\n  };\r\n  probability: {\r\n    home: string;\r\n    draw: string;\r\n    away: string;\r\n  };\r\n  recommended?: 'home' | 'draw' | 'away';\r\n  algorithm?: {\r\n    recommendation: string;\r\n    confidence: number;\r\n    type: string;\r\n  };\r\n  isPromo?: boolean;\r\n}\r\n\r\nexport interface StatsData {\r\n  roi: {\r\n    daily: Array<{date: string, value: number}>;\r\n    weekly: number;\r\n    monthly: number;\r\n  };\r\n  bets: {\r\n    daily: Array<{date: string, wins: number, losses: number}>;\r\n    totalWins: number;\r\n    totalLosses: number;\r\n    winRate: number;\r\n  };\r\n}\r\n\r\nconst soccerApiService = {\r\n  getLiveMatches: async (): Promise<Match[]> => {\r\n    try {\r\n      console.log('Fetching live matches from API');\r\n      const response = await axios.get(`${API_BASE_URL}/matches/live`);\r\n      console.log('API response for live matches:', response.data);\r\n      \r\n      if (!response.data || !response.data.result) {\r\n        throw new Error('Invalid API response format');\r\n      }\r\n      \r\n      return response.data.result;\r\n    } catch (error) {\r\n      console.error('Error fetching live matches:', error);\r\n      throw error; // Don't return empty array - throw error to prevent fallback data use\r\n    }\r\n  },\r\n  \r\n  getUpcomingMatches: async (hours = 24): Promise<Match[]> => {\r\n    try {\r\n      console.log(`Fetching upcoming matches for next ${hours} hours from API`);\r\n      const response = await axios.get(`${API_BASE_URL}/matches/upcoming?hours=${hours}`);\r\n      console.log('API response for upcoming matches:', response.data);\r\n      \r\n      if (!response.data || !response.data.result) {\r\n        throw new Error('Invalid API response format');\r\n      }\r\n      \r\n      return response.data.result;\r\n    } catch (error) {\r\n      console.error('Error fetching upcoming matches:', error);\r\n      throw error; // Don't return empty array - throw error to prevent fallback data use\r\n    }\r\n  },\r\n  \r\n  getStats: async (period = 'week'): Promise<StatsData> => {\r\n    try {\r\n      console.log(`Fetching stats for period ${period} from API`);\r\n      const response = await axios.get(`${API_BASE_URL}/stats?period=${period}`);\r\n      console.log('API response for stats:', response.data);\r\n      \r\n      if (!response.data || !response.data.result) {\r\n        throw new Error('Invalid API response format');\r\n      }\r\n      \r\n      return response.data.result;\r\n    } catch (error) {\r\n      console.error('Error fetching stats:', error);\r\n      throw error; // Don't return empty array - throw error to prevent fallback data use\r\n    }\r\n  }\r\n};\r\n\r\nexport default soccerApiService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;AA+DhD,MAAMC,gBAAgB,GAAG;EACvBC,cAAc,EAAE,MAAAA,CAAA,KAA8B;IAC5C,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,YAAY,eAAe,CAAC;MAChEG,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEC,QAAQ,CAACE,IAAI,CAAC;MAE5D,IAAI,CAACF,QAAQ,CAACE,IAAI,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;QAC3C,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,OAAOJ,QAAQ,CAACE,IAAI,CAACC,MAAM;IAC7B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACpD,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAEDC,kBAAkB,EAAE,MAAAA,CAAOC,KAAK,GAAG,EAAE,KAAuB;IAC1D,IAAI;MACFT,OAAO,CAACC,GAAG,CAAC,sCAAsCQ,KAAK,iBAAiB,CAAC;MACzE,MAAMP,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,YAAY,2BAA2BY,KAAK,EAAE,CAAC;MACnFT,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEC,QAAQ,CAACE,IAAI,CAAC;MAEhE,IAAI,CAACF,QAAQ,CAACE,IAAI,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;QAC3C,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,OAAOJ,QAAQ,CAACE,IAAI,CAACC,MAAM;IAC7B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAEDG,QAAQ,EAAE,MAAAA,CAAOC,MAAM,GAAG,MAAM,KAAyB;IACvD,IAAI;MACFX,OAAO,CAACC,GAAG,CAAC,6BAA6BU,MAAM,WAAW,CAAC;MAC3D,MAAMT,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAG,CAAC,GAAGN,YAAY,iBAAiBc,MAAM,EAAE,CAAC;MAC1EX,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,QAAQ,CAACE,IAAI,CAAC;MAErD,IAAI,CAACF,QAAQ,CAACE,IAAI,IAAI,CAACF,QAAQ,CAACE,IAAI,CAACC,MAAM,EAAE;QAC3C,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,OAAOJ,QAAQ,CAACE,IAAI,CAACC,MAAM;IAC7B,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK,CAAC,CAAC;IACf;EACF;AACF,CAAC;AAED,eAAeT,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module"}